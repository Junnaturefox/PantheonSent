plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runConfigs.configureEach {
        if (name == "client") {
            runDir = "../run"

            if (System.getenv('MC_USERNAME') && System.getenv('MC_UUID') && System.getenv('MC_ACCESS_TOKEN')) {
                programArgs '--username', System.getenv('MC_USERNAME'), '--uuid', System.getenv('MC_UUID'), '--accessToken', System.getenv('MC_ACCESS_TOKEN')
            }
        } else if (name == "server") {
            runDir = "../run/server-forge"
        } else if (name == "data") {
            programArgs '--existing', project(":common").file("src/main/resources/").absolutePath
        }
    }

    forge {
        mixinConfig "pantheonsent-common.mixins.json"
        mixinConfig "pantheonsent.mixins.json"

        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        dataGen {
            mod "pantheonsent"
        }
    }

    mixin {
        defaultRefmapName = "pantheonsent-forge-refmap.json"
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.neoforged:forge:${rootProject.neoforge_version}"
    modApi("net.threetag:palladium-forge:${rootProject.palladium_version}") {
        exclude group: "software.bernie.geckolib"
    }

    // Mixin Extras
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.2.0"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.2.0"))

    // Sherds API
    include modImplementation("maven.modrinth:sherdsapi:${rootProject.sherds_api_version}+Forge")

    // Shutup Experimental Settings
    modLocalRuntime "curse.maven:shutupexperimentalsettings-407174:${rootProject.shutupexperimentalsettings_version}"

    // JEI
    modCompileOnlyApi "mezz.jei:jei-${rootProject.minecraft_version}-forge-api:${rootProject.jei_version}"
//    modRuntimeOnly "mezz.jei:jei-${rootProject.minecraft_version}-forge:${rootProject.jei_version}"

    // REI
    modImplementation "me.shedaniel:RoughlyEnoughItems-forge:${rootProject.rei_version}"

    // Curios
    modLocalRuntime "top.theillusivec4.curios:curios-forge:${rootProject.curios_version}"
    modCompileOnly "top.theillusivec4.curios:curios-forge:${rootProject.curios_version}:api"

    // WorldEdit
    modLocalRuntime "curse.maven:worldedit-225608:${rootProject.worldedit_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", rootProject.mod_version

    filesMatching("META-INF/mods.toml") {
        expand "version": rootProject.mod_version
    }
}

sourceSets.main.resources {
    exclude '**/data/pantheonsent/**/fabric/*'
    exclude '**/data/trinkets/*'
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = 'forge'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories {
        maven {
            url 'https://maven.threetag.net'
            credentials {
                username System.getenv('MAVEN_USERNAME')
                password System.getenv('MAVEN_PASSWORD')
            }
        }
    }
}